import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE, PATCH',
  'Access-Control-Max-Age': '86400',
  'Access-Control-Allow-Credentials': 'false'
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { status: 200, headers: corsHeaders });
  }

  try {
    const { action, niche, contentType = 'article', approvalRequired = true } = await req.json();

    // Get environment variables
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const serviceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');

    if (!supabaseUrl || !serviceRoleKey) {
      throw new Error('Supabase configuration missing');
    }

    if (!geminiApiKey) {
      throw new Error('Gemini API key not configured');
    }

    // Get Content Creation Agent configuration
    const agentResponse = await fetch(`${supabaseUrl}/rest/v1/agents?name=eq.Content Creation Agent`, {
      headers: {
        'Authorization': `Bearer ${serviceRoleKey}`,
        'apikey': serviceRoleKey,
        'Content-Type': 'application/json'
      }
    });

    const agents = await agentResponse.json();
    if (!agents.length) {
      throw new Error('Content Creation Agent not found');
    }

    const agent = agents[0];
    const config = agent.config;
    const targetNiches = config.target_niches || ['Product Reviews', 'Renewable Energy', 'Sustainable Living', 'Zero Waste'];

    // Validate niche if provided
    if (niche && !targetNiches.includes(niche)) {
      throw new Error(`Invalid niche. Allowed niches: ${targetNiches.join(', ')}`);
    }

    // Select random niche if not specified
    const selectedNiche = niche || targetNiches[Math.floor(Math.random() * targetNiches.length)];

    // Create content generation session
    const sessionResponse = await fetch(`${supabaseUrl}/rest/v1/content_generation_sessions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${serviceRoleKey}`,
        'apikey': serviceRoleKey,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      },
      body: JSON.stringify({
        agent_id: agent.id,
        session_type: 'content_generation',
        target_niche: selectedNiche,
        content_specifications: {
          content_type: contentType,
          word_range: config.word_range || [1500, 3000],
          approval_required: approvalRequired
        },
        session_status: 'active'
      })
    });

    const session = await sessionResponse.json();
    const sessionId = session[0].id;

    // Generate content using Gemini AI
    const prompt = `Write a comprehensive ${contentType} about ${selectedNiche}. 

Requirements:
- Word count: ${config.word_range?.[0] || 1500}-${config.word_range?.[1] || 3000} words
- Include practical tips and actionable advice
- Add relevant affiliate product recommendations where appropriate
- Optimize for SEO with natural keyword integration
- Maintain professional, informative tone
- Include compelling introduction and conclusion

Topic focus: ${selectedNiche}
Content type: ${contentType}

Provide high-quality, engaging content that provides real value to readers.`;

    const geminiResponse = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        contents: [{
          parts: [{ text: prompt }]
        }]
      })
    });

    const geminiData = await geminiResponse.json();
    
    if (!geminiResponse.ok) {
      throw new Error(`Gemini API error: ${geminiData.error?.message || 'Unknown error'}`);
    }

    const generatedContent = geminiData.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!generatedContent) {
      throw new Error('No content generated by Gemini API');
    }
    
    // Extract title from the first line or generate one
    const lines = generatedContent.split('\n').filter(line => line.trim());
    const title = lines[0].replace(/^#+\s*/, '') || `${selectedNiche}: ${contentType}`;

    // Create content item with approval status
    const contentResponse = await fetch(`${supabaseUrl}/rest/v1/content_items`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${serviceRoleKey}`,
        'apikey': serviceRoleKey,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      },
      body: JSON.stringify({
        title: title,
        content_type: contentType,
        status: approvalRequired ? 'pending_approval' : 'generated',
        content_body: generatedContent,
        author: 'Content Creation Agent',
        platform: 'web',
        seo_data: {
          target_niche: selectedNiche,
          word_count: generatedContent.split(' ').length,
          generated_at: new Date().toISOString()
        },
        engagement_metrics: {
          word_count: generatedContent.split(' ').length
        }
      })
    });

    const contentItem = await contentResponse.json();
    const contentId = contentItem[0].id;

    // Create approval workflow entry if manual approval is required
    if (approvalRequired) {
      await fetch(`${supabaseUrl}/rest/v1/content_approval_workflow`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${serviceRoleKey}`,
          'apikey': serviceRoleKey,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          content_item_id: contentId,
          agent_id: agent.id,
          workflow_stage: 'content_review',
          status: 'pending_approval',
          approval_required: true,
          priority_level: 'normal',
          estimated_completion: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // 24 hours
        })
      });
    }

    // Update generation session
    await fetch(`${supabaseUrl}/rest/v1/content_generation_sessions?id=eq.${sessionId}`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${serviceRoleKey}`,
        'apikey': serviceRoleKey,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        generated_content_ids: [contentId],
        total_content_generated: 1,
        session_status: 'completed',
        quality_score: 0.85,
        completed_at: new Date().toISOString()
      })
    });

    // Update agent last run time
    await fetch(`${supabaseUrl}/rest/v1/agents?id=eq.${agent.id}`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${serviceRoleKey}`,
        'apikey': serviceRoleKey,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        last_run: new Date().toISOString()
      })
    });

    return new Response(JSON.stringify({
      success: true,
      data: {
        content_id: contentId,
        title: title,
        niche: selectedNiche,
        status: approvalRequired ? 'pending_approval' : 'generated',
        word_count: generatedContent.split(' ').length,
        session_id: sessionId,
        approval_required: approvalRequired
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('Content Creation Agent error:', error);
    
    const errorResponse = {
      error: {
        code: 'CONTENT_CREATION_FAILED',
        message: error.message,
        timestamp: new Date().toISOString()
      }
    };

    return new Response(JSON.stringify(errorResponse), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});